{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://fisheye/./src/class/Photographer.js","webpack://fisheye/./src/class/Filter.js","webpack://fisheye/./src/service/api.js","webpack://fisheye/./src/index.js"],"sourcesContent":["/**\r\n * Class to create a photographer\r\n */\r\nexport default class Photographer {\r\n\t/**\r\n\t * \r\n\t * @param {string} name name of the photographer\r\n\t * @param {string} city City where the photographer live\r\n\t * @param {string} country Country where the photographer live\r\n\t * @param {string[]} tags An array an array of tags \r\n\t * @param {string} tagline The tagline of the photographer\r\n\t * @param {number} price The price dayliprice of the photographer\r\n\t * @param {string} portrait The file name with the extension of his portrait\r\n\t * @param {number} id The id of the photographer\r\n\t */\r\n\tconstructor( name, city, country, tags, tagline, price, portrait, id) {\r\n\t\tthis.name = name\r\n\t\tthis.city = city\r\n\t\tthis.country = country\r\n\t\tthis.tags = tags\r\n\t\tthis.tagline = tagline\r\n\t\tthis.price = price\r\n\t\tthis.portrait = portrait\r\n\t\tthis.id = id\r\n\t}\r\n\tdom = {\r\n\t\tphotographers : document.querySelector('.photographers'),\r\n\t\tphotographer : document.querySelector('.photographer'),\r\n\t\tnameInForm : document.querySelector('.modal__head')\r\n\t}\r\n\t/**\r\n\t *  Construct the Dom Element of the price on photographer's profil page\r\n\t * @returns A string that contain the DOM element with the price\r\n\t */\r\n\tgetPrice = () => {\r\n\t\treturn `\r\n\t\t<p class=\"infos__price\">${this.price}€ / jour</p>\r\n\t\t`\r\n\t}\r\n\r\n\t/**\r\n\t * Construct all tags in the photographer's card on home page\r\n\t * @returns A string that contain all Dom Elements for each tag\r\n\t */\r\n\ttagsForPhotographersCards = () => {\r\n\t\tlet spanTags = ''\r\n\t\tfor (let i = 0; i < this.tags.length; i++) {\r\n\t\t\tspanTags += `<span class=\"photographer__tag\"><a href=\"./index.html?tag=${this.tags[i]}\">#${this.tags[i]}</a></span>`\r\n\t\t}\r\n\t\treturn spanTags\r\n\t}\r\n\r\n\t/**\r\n\t * To construct a photographer's card on home page\r\n\t * @returns A string that correspond to the DOM elements for a photographer's card on home page\r\n\t */\r\n\tget photographerCard() {\r\n\t\treturn `\r\n\t\t<article class=\"photographer\">\r\n\t\t\t<a href=\"./photographers/index.html?id=${this.id}\" class=\"photographer__header\">\r\n\t\t\t\t<img class=\"photographer__img\" src=\"public/images/photographers/id_photos/${this.portrait}\" alt=\"\">\r\n\t\t\t\t<h2 class=\"photographer__name\">${this.name}</h2>\r\n\t\t\t</a>\r\n\t\t\t<div class=\"photographer__content\">\r\n\t\t\t\t<p class=\"photographer__location\">${this.city}, ${this.country}</p>\r\n\t\t\t\t<p class=\"photographer__tagline\">${this.tagline}</p>\r\n\t\t\t\t<p class=\"photographer__price\">${this.price}€/jour</p>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"photographer__tags\">` + this.tagsForPhotographersCards() + `</div>\r\n\t\t</article>\r\n\t\t`\r\n\t}\r\n\r\n\t/**\r\n\t * Construct all tags in the photographer's card on photographer's profil page\r\n\t * @returns A string that contain all Dom Elements for each tag\r\n\t */\r\n\ttagsForPhotographerHeader = () => {\r\n\t\tlet spanTags = ''\r\n\t\tfor (let i = 0; i < this.tags.length; i++) {\r\n\t\t\tspanTags += `<span class=\"photographer__tag\"><a href=\"../index.html?tag=${this.tags[i]}\">#${this.tags[i]}</a></span>`\r\n\t\t}\r\n\t\treturn spanTags\r\n\t}\r\n\r\n\t/**\r\n\t * To construct a photographer's card on photographer's profil page\r\n\t * @returns A string that correspond to the DOM elements for a photographer's card on photographer's profil page\r\n\t */\r\n\tget photographerHeader() {\r\n\t\treturn `\r\n\t\t<article class=\"photographer__profil\">\r\n\t\t\t<div class=\"photographer__body\">\r\n\t\t\t\t<div class=\"photographer__content\">\r\n\t\t\t\t\t<h1 class=\"photographer__name\">${this.name}</h1>\r\n\t\t\t\t\t<p class=\"photographer__location\">${this.city}, ${this.country}</p>\r\n\t\t\t\t\t<p class=\"photographer__tagline\">${this.tagline}</p>\r\n\t\t\t\t\t<div class=\"photographer__tags\">` + this.tagsForPhotographerHeader() + `</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button class=\"photographer__contactButton\">Contactez-moi</button>\r\n\t\t\t</div>\r\n\t\t\t<img class=\"photographer__img\" src=\"../public/images/photographers/id_photos/${this.portrait}\" alt=\"${this.name}\">\r\n\t\t</article>\r\n\t\t`\r\n\t}\r\n\r\n\t/**\r\n\t *  Construct the Dom Element withe the photographer's name for the contact form on photographer's profil page\r\n\t * @returns A string that contain the DOM element with the photographer's name\r\n\t */\r\n\tget photographerNameInForm() {\r\n\t\treturn `\r\n\t\t\t<h1 class=\"modal__head\" id=\"contact\">Contactez-moi </br> ${this.name}</h1>\r\n\t\t`   \r\n\t}\r\n\r\n}","/**\r\n * Class to create a filter\r\n */\r\nexport default class Filter {\r\n\t/**\r\n\t * \r\n\t * @param {string} filter \r\n\t */\r\n\tconstructor(filter) {\r\n\t\tthis.filter = filter\r\n\t}\r\n\r\n\t/**\r\n\t * To construct the Dom Element of a tag in the header of the Home page\r\n\t * @return A string that correspond to a Dom Element that contain the filter\r\n\t */\r\n\tget displayFilter() {\r\n\t\treturn `\r\n\t\t<li class=\"header__filter-list-item\">\r\n\t\t\t<a href=\"./index.html?tag=${this.filter}\" class=\"header__filter-tag\">#${this.filter}</a>\r\n\t\t</li>\r\n\t\t`\r\n\t}\r\n}","import Photographer from '../class/Photographer.js'\r\nimport Media from '../../photographers/src/class/Media.js'\r\nimport Filter from '../class/Filter.js'\r\n\r\n/**\r\n * Function that get Data of an URL and parsed as Json format\r\n * @returns parsed data as json format\r\n */\r\nlet parseDataToJson = async () => {\r\n\tconst url = 'https://roy-framery-s-openclassrooms-projects.github.io/RoyFramery_6_10082021/fisheyeData.json'\r\n\tconst response = await fetch(url)\r\n\tif (response.ok) {\r\n\t\treturn response.json()\r\n\t} else {\r\n\t\tconsole.error(response.status)\r\n\t}\r\n}\r\n\r\n/**\r\n * Function that waiting parsed Data as Json format \r\n * and uses a loop to instantiate a new Photographer class for each photographer\r\n * @param {object} jsonData parsed data as json format\r\n * @returns an array of instantiations of the Photographer class\r\n */\r\nlet getPhotographers = async(jsonData) => {\r\n\tconst data = await jsonData\r\n\tconst photographers = data.photographers\r\n\tlet photographersArray = []\r\n\tphotographers.map(data => {\r\n\t\tphotographersArray.push(new Photographer(data.name, data.city, data.country, data.tags, data.tagline, data.price, data.portrait, data.id))\r\n\t})\r\n\treturn photographersArray\r\n}\r\n\r\n/**\r\n * Function that waiting parsed Data as Json format \r\n * and uses a loop to instantiate a new Photographer class according to the photographer's id\r\n * @param {object} jsonData parsed data as json format\r\n * @param {number} id The id of the photographer get in URL's parameter\r\n * @returns An instantiations of the Photographer class\r\n */\r\nlet getPhotographersById = async(jsonData, id) => {\r\n\tconst data = await jsonData\r\n\tconst photographers = data.photographers\r\n\tlet photographerArray = []\r\n\tphotographers.map(data => {\r\n\t\t// if the Id in URL's parameter is the same as the photographer's id, then create an instance of Photographer\r\n\t\tif (id == data.id) {\r\n\t\t\tphotographerArray.push(new Photographer(data.name, data.city, data.country, data.tags, data.tagline, data.price, data.portrait, data.id))\r\n\t\t}\r\n\t})\r\n\treturn photographerArray\r\n}\r\n\r\n/**\r\n * Function that waiting parsed Data as Json format\r\n * and instantiates new filter class for each tags\r\n * @param {object} jsonData parsed data as json format\r\n * @returns An array of instantiations of the filter class\r\n */\r\nlet getTagsFromPhotographers = async(jsonData) => {\r\n\tconst data = await jsonData\r\n\tconst photographers = data.photographers\r\n\tlet filters = []\r\n\t// Loop to remove duplicate tags\r\n\tfor (let photographer of photographers) {\r\n\t\tfor (let tag of photographer.tags) {\r\n\t\t\tif (!filters.includes(tag)) {\r\n\t\t\t\tfilters.push(tag)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tlet tags = []\r\n\t// Loop to create instanciation of filter for each tags\r\n\tfilters.map(filter => \r\n\t\ttags.push(new Filter(filter))\r\n\t)\r\n\treturn tags\r\n}\r\n\r\n/**\r\n * Function that waiting parsed Data as Json format \r\n * and uses a loop to instantiate a new media class according to the media's id\r\n * @param {object} jsonData parsed data as json format\r\n * @param {number} id The id of the photographer get in URL's parameter\r\n * @param {string} filter option in the select element on photographer's profil page\r\n * @returns An array of instantiations of Media for each media\r\n */\r\nlet getMediaByPhotographerId = async(jsonData, id, filter) => {\r\n\tconst data = await jsonData\r\n\tconst media = data.media\r\n\tlet mediaArray = []\r\n\tmedia.map(media => {\r\n\t\t// if the Id in URL's parameter is the same as the media's id, then create an instance of Photographer\r\n\t\tif (id == media.photographerId) {\r\n\t\t\tmediaArray.push(new Media( media.title, media['image'] ? media.image : media.video, media.likes, media.altTxt, media['image'] ? 'image' : 'video', media.date))\r\n\t\t}\r\n\t})\r\n\tsortMediaByFilter(mediaArray, filter)\r\n\treturn mediaArray\r\n}\r\n\r\n/**\r\n * Sorts an array according to the filter passed in parameter\r\n * @param {object[]} media Array of instantiations of the media class\r\n * @param {string} filter option in the select element on photographer's profil page\r\n * @returns An array of objects sorted by a filter \r\n */\r\nlet sortMediaByFilter = (media, filter) => {\r\n\tswitch (filter) {\r\n\tcase 'likes':\r\n\t\treturn media.sort((a,b) => {\r\n\t\t\treturn  b[filter] - a[filter]\r\n\t\t}) \r\n\tcase 'title':\r\n\t\treturn media.sort((a,b) => {\r\n\t\t\tif(a[filter] < b[filter]) { return -1 }\r\n\t\t\tif(a[filter] > b[filter]) { return 1 }\r\n\t\t\treturn 0\r\n\t\t}) \r\n\tcase 'date':\r\n\t\treturn media.sort((a,b) => {\r\n\t\t\treturn new Date(b[filter]) - new Date(a[filter])\r\n\t\t}) \r\n\tdefault:\r\n\t\tbreak\r\n\t}\r\n}\r\n\r\nexport {parseDataToJson, getPhotographers, getTagsFromPhotographers, getPhotographersById, getMediaByPhotographerId}","import {parseDataToJson, getPhotographers, getTagsFromPhotographers} from './service/api.js'\r\n\r\nconst dom = {\r\n\tphotographersContainer : document.querySelector('.photographers'),\r\n\tfiltersList : document.querySelector('.header__filter-list')\r\n}\r\n\r\n// to display tags in the header\r\nconst tags = getTagsFromPhotographers(parseDataToJson())\r\ntags.then( tags =>\r\n\ttags.map( tag => {\r\n\t\t// displatFilter is a getter of Filter Class\r\n\t\tdom.filtersList.insertAdjacentHTML('beforeend', tag.displayFilter)\r\n\t})\r\n)\r\n\r\n// get tag param to filter\r\nconst queryString = window.location.search\r\nconst urlParams = new URLSearchParams(queryString)\r\nconst paramTag = urlParams.get('tag')\r\n\r\n// to display photographers cards\r\nconst photographers = getPhotographers(parseDataToJson())\r\nphotographers.then(photographers => {\r\n\tphotographers.map(photographer => {\r\n\t\t// if there are not a tag in URL's parameter, then it insert the photographers' cards\r\n\t\tif (paramTag == null) {\r\n\t\t\tdom.photographersContainer.insertAdjacentHTML('beforeend', photographer.photographerCard)\r\n\t\t} \r\n\t\t// else if there are a tag in URL's parameter, then create a loop to browse the tags of each photographer\r\n\t\telse {\r\n\t\t\tfor (const tag of photographer.tags) {\r\n\t\t\t\t// if the paramter tag in the URL matches with on of the photographer's tag, \r\n\t\t\t\t// then insert the photographers' cards\r\n\t\t\t\tif (paramTag == tag) {\r\n\t\t\t\t\t// phototographerCard is a getter of the Photographer Class\r\n\t\t\t\t\tdom.photographersContainer.insertAdjacentHTML('beforeend', photographer.photographerCard)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst filterTags = document.querySelectorAll('.header__filter-tag')\r\n\t\t\tfilterTags.forEach(filter => {\r\n\t\t\t\tif (filter.innerText.toLowerCase().includes(paramTag)){\r\n\t\t\t\t\tfilter.focus()\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n})\r\n\r\n// display \"go to content\" link on scroll\r\nconst contentLink = document.querySelector('.anchor')\r\nwindow.addEventListener('scroll', () => {\r\n\t// Displays the link only if the user's screen width is greater than 1023\r\n\tif (document.documentElement.clientWidth > 1023) {\r\n\t\tcontentLink.style.display = 'block'\r\n\t}\r\n})\r\n"],"names":["Photographer","name","city","country","tags","tagline","price","portrait","id","photographers","document","querySelector","photographer","nameInForm","spanTags","i","length","this","tagsForPhotographersCards","tagsForPhotographerHeader","Filter","filter","parseDataToJson","fetch","response","ok","json","console","error","status","getPhotographers","jsonData","data","photographersArray","map","push","getTagsFromPhotographers","filters","tag","includes","dom","photographersContainer","filtersList","then","insertAdjacentHTML","displayFilter","queryString","window","location","search","paramTag","URLSearchParams","get","photographerCard","querySelectorAll","forEach","innerText","toLowerCase","focus","contentLink","addEventListener","documentElement","clientWidth","style","display"],"sourceRoot":""}